
LCD_HD44780.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e04  08002e04  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e0c  08002e0c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001c0  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006eb5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014db  00000000  00000000  00026f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000730  00000000  00000000  00028460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000577  00000000  00000000  00028b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000204e7  00000000  00000000  00029107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009921  00000000  00000000  000495ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c287c  00000000  00000000  00052f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021c8  00000000  00000000  0011578c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00117954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d78 	.word	0x08002d78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002d78 	.word	0x08002d78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <lcd_send_command>:
 *
 * @param[in]  cmd						- Command.
 */

void lcd_send_command(LCD_HandleTypeDef *lcd, uint8_t cmd)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]

	lcd_write(lcd, (cmd >> 4), RS_PIN_RESET);
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	091b      	lsrs	r3, r3, #4
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f83e 	bl	8000604 <lcd_write>
	lcd_write(lcd, (cmd & 0x0F), RS_PIN_RESET);
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	f003 030f 	and.w	r3, r3, #15
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f835 	bl	8000604 <lcd_write>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <lcd_print_char>:
 *
 * @param[in]  data						- Character to send.
 */

void lcd_print_char(LCD_HandleTypeDef *lcd, uint8_t data)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	70fb      	strb	r3, [r7, #3]

	lcd_write(lcd, (data >> 4), RS_PIN_SET);  			//Higher nibble
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	091b      	lsrs	r3, r3, #4
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f823 	bl	8000604 <lcd_write>
	lcd_write(lcd, (data & 0x0F), RS_PIN_SET); 			//Lower nibble
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	f003 030f 	and.w	r3, r3, #15
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 f81a 	bl	8000604 <lcd_write>

}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <lcd_print_string>:
 *
 * @param[in]  message					- String to send.
 */

void lcd_print_string(LCD_HandleTypeDef *lcd, char *message)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

      do
      {
          lcd_print_char(lcd, (uint8_t)*message++);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	603a      	str	r2, [r7, #0]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffd8 	bl	80005a2 <lcd_print_char>
      }
      while (*message != '\0');
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f3      	bne.n	80005e2 <lcd_print_string+0xa>

}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <lcd_write>:
 * @param[in]  nibble					- 4-bits to send.
 *
 * @param[in]  Rs						- Rs pin.
 */

void lcd_write(LCD_HandleTypeDef *lcd, uint8_t nibble, uint8_t Rs){
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	70bb      	strb	r3, [r7, #2]

	uint8_t Data = (nibble << LCD_IO_D4);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	73fb      	strb	r3, [r7, #15]
	Data |= Rs << LCD_IO_RS;
 800061c:	7bfa      	ldrb	r2, [r7, #15]
 800061e:	78bb      	ldrb	r3, [r7, #2]
 8000620:	4313      	orrs	r3, r2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
	Data |= (1 << LCD_IO_BL); 						// Backlight always has to be at 1
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	b2db      	uxtb	r3, r3
 800062e:	73fb      	strb	r3, [r7, #15]
	Data |= (1 << LCD_IO_EN);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(lcd->I2C_Handle, lcd->I2C_Addr, &Data, 1, 100);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	b299      	uxth	r1, r3
 8000644:	f107 020f 	add.w	r2, r7, #15
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	f000 ff63 	bl	8001518 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 fb76 	bl	8000d44 <HAL_Delay>
	Data &= ~(1 << LCD_IO_EN);
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	f023 0304 	bic.w	r3, r3, #4
 800065e:	b2db      	uxtb	r3, r3
 8000660:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(lcd->I2C_Handle, lcd->I2C_Addr, &Data, 1, 100);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6818      	ldr	r0, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	b299      	uxth	r1, r3
 800066c:	f107 020f 	add.w	r2, r7, #15
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2301      	movs	r3, #1
 8000676:	f000 ff4f 	bl	8001518 <HAL_I2C_Master_Transmit>

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <lcd_init_I2C>:
 * @param[in]  lcd						- LCD handler.
 *
 * @param[in]  I2C_Handle				- I2C handler.
 */

void lcd_init_I2C(LCD_HandleTypeDef *lcd, I2C_HandleTypeDef *I2C_Handle){
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]

	lcd->I2C_Addr = SLAVE_ADDRESS_PCF;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	224e      	movs	r2, #78	; 0x4e
 8000690:	605a      	str	r2, [r3, #4]
	lcd->I2C_Handle = I2C_Handle;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	601a      	str	r2, [r3, #0]

	lcd_init(lcd);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f804 	bl	80006a6 <lcd_init>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <lcd_init>:
 *
 * @param[in]  lcd						- LCD handler.
 */

void lcd_init(LCD_HandleTypeDef *lcd)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af02      	add	r7, sp, #8
 80006ac:	6078      	str	r0, [r7, #4]

	HAL_Delay(50);
 80006ae:	2032      	movs	r0, #50	; 0x32
 80006b0:	f000 fb48 	bl	8000d44 <HAL_Delay>

	// Initialise data at 0
	uint8_t data = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(lcd->I2C_Handle, lcd->I2C_Addr, &data, 1, 100);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	b299      	uxth	r1, r3
 80006c2:	f107 020f 	add.w	r2, r7, #15
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	f000 ff24 	bl	8001518 <HAL_I2C_Master_Transmit>

	HAL_Delay(40);
 80006d0:	2028      	movs	r0, #40	; 0x28
 80006d2:	f000 fb37 	bl	8000d44 <HAL_Delay>

	// Send first nibble
	lcd_write(lcd, INIT_3, RS_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2103      	movs	r1, #3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ff92 	bl	8000604 <lcd_write>

	HAL_Delay(5);
 80006e0:	2005      	movs	r0, #5
 80006e2:	f000 fb2f 	bl	8000d44 <HAL_Delay>

	// Send second nibble
	lcd_write(lcd, INIT_3, RS_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2103      	movs	r1, #3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff ff8a 	bl	8000604 <lcd_write>

	udelay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f000 f864 	bl	80007be <udelay>

	// Send third and fourth nibble
	lcd_write(lcd, INIT_3, RS_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2103      	movs	r1, #3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff82 	bl	8000604 <lcd_write>
	lcd_write(lcd, INIT_2, RS_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2102      	movs	r1, #2
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff7d 	bl	8000604 <lcd_write>

	// Set 4-bits data length, display 2 lines and set 5x8 dots character font
	lcd_send_command(lcd, LCD_CMD_4DL_2L_5x8D);
 800070a:	2128      	movs	r1, #40	; 0x28
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff2d 	bl	800056c <lcd_send_command>

	// Set display on, cursor on and character box not blinking
	lcd_send_command(lcd, LCD_CMD_Don_C_nBL);
 8000712:	210e      	movs	r1, #14
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff29 	bl	800056c <lcd_send_command>

	lcd_display_clear(lcd);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f808 	bl	8000730 <lcd_display_clear>

	// Entry mode set. Cursor increment and no display shifted
	lcd_send_command(lcd, LCD_CMD_CI_nDS);
 8000720:	2106      	movs	r1, #6
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff ff22 	bl	800056c <lcd_send_command>

}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_display_clear>:
 *
 * @param[in]  lcd						- LCD handler.
 */

void lcd_display_clear(LCD_HandleTypeDef *lcd)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	lcd_send_command(lcd, LCD_CMD_CLEAR);
 8000738:	2101      	movs	r1, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff16 	bl	800056c <lcd_send_command>

	HAL_Delay(2);
 8000740:	2002      	movs	r0, #2
 8000742:	f000 faff 	bl	8000d44 <HAL_Delay>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <lcd_display_return_home>:
 * @param[in]  lcd						- LCD handler.
 */


void lcd_display_return_home(LCD_HandleTypeDef *lcd)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]

	lcd_send_command(lcd, LCD_CMD_HOME);
 8000756:	2102      	movs	r1, #2
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff07 	bl	800056c <lcd_send_command>

	HAL_Delay(2);
 800075e:	2002      	movs	r0, #2
 8000760:	f000 faf0 	bl	8000d44 <HAL_Delay>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd_set_cursor>:
 *
 * @param[in]  column					- Column Number (1 to 16).  Assuming a 2x16 characters display.
 */

void lcd_set_cursor(LCD_HandleTypeDef *lcd, uint8_t row, uint8_t column)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
 8000778:	4613      	mov	r3, r2
 800077a:	70bb      	strb	r3, [r7, #2]
  column--;
 800077c:	78bb      	ldrb	r3, [r7, #2]
 800077e:	3b01      	subs	r3, #1
 8000780:	70bb      	strb	r3, [r7, #2]
  switch (row)
 8000782:	78fb      	ldrb	r3, [r7, #3]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d002      	beq.n	800078e <lcd_set_cursor+0x22>
 8000788:	2b02      	cmp	r3, #2
 800078a:	d00a      	beq.n	80007a2 <lcd_set_cursor+0x36>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command(lcd, (column |= 0xC0));
      break;
    default:
      break;
 800078c:	e013      	b.n	80007b6 <lcd_set_cursor+0x4a>
      lcd_send_command(lcd, (column |= 0x80));
 800078e:	78bb      	ldrb	r3, [r7, #2]
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	70bb      	strb	r3, [r7, #2]
 8000796:	78bb      	ldrb	r3, [r7, #2]
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fee6 	bl	800056c <lcd_send_command>
      break;
 80007a0:	e009      	b.n	80007b6 <lcd_set_cursor+0x4a>
        lcd_send_command(lcd, (column |= 0xC0));
 80007a2:	78bb      	ldrb	r3, [r7, #2]
 80007a4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80007a8:	70bb      	strb	r3, [r7, #2]
 80007aa:	78bb      	ldrb	r3, [r7, #2]
 80007ac:	4619      	mov	r1, r3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fedc 	bl	800056c <lcd_send_command>
      break;
 80007b4:	bf00      	nop
  }
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <udelay>:
 *
 * @param[in]  cnt						- Count in microseconds.
 */

static void udelay(uint32_t cnt)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <udelay+0x14>
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3f8      	bcc.n	80007cc <udelay+0xe>
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fa37 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f871 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 f907 	bl	8000a08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007fa:	f000 f8d7 	bl	80009ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LCD_HandleTypeDef lcd;

  lcd_init_I2C(&lcd, &hi2c1);
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4930      	ldr	r1, [pc, #192]	; (80008c4 <main+0xdc>)
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff3c 	bl	8000682 <lcd_init_I2C>

  lcd_print_string(&lcd, "LCD library");
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	492e      	ldr	r1, [pc, #184]	; (80008c8 <main+0xe0>)
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fee1 	bl	80005d8 <lcd_print_string>
  HAL_Delay(2000);
 8000816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800081a:	f000 fa93 	bl	8000d44 <HAL_Delay>

  lcd_set_cursor(&lcd, DISPLAY_ROW_2, DISPLAY_COLUMN_1);
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2201      	movs	r2, #1
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffa0 	bl	800076c <lcd_set_cursor>

  lcd_send_command(&lcd, LCD_CMD_Don_nC_BL);
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	210d      	movs	r1, #13
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fe9a 	bl	800056c <lcd_send_command>

  lcd_print_string(&lcd, "LCD library");
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4922      	ldr	r1, [pc, #136]	; (80008c8 <main+0xe0>)
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff feca 	bl	80005d8 <lcd_print_string>
  HAL_Delay(2000);
 8000844:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000848:	f000 fa7c 	bl	8000d44 <HAL_Delay>

  lcd_display_clear(&lcd);
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff6d 	bl	8000730 <lcd_display_clear>
  lcd_display_return_home(&lcd);
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff77 	bl	800074e <lcd_display_return_home>
  lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	210c      	movs	r1, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe80 	bl	800056c <lcd_send_command>

  uint16_t date_num[3] = {3, 11, 2023};
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <main+0xe4>)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000876:	6018      	str	r0, [r3, #0]
 8000878:	3304      	adds	r3, #4
 800087a:	8019      	strh	r1, [r3, #0]
  char date_char[20];
  sprintf(date_char, "0%d/%d/%d", date_num[0], date_num[1], date_num[2]);
 800087c:	8b3b      	ldrh	r3, [r7, #24]
 800087e:	461a      	mov	r2, r3
 8000880:	8b7b      	ldrh	r3, [r7, #26]
 8000882:	4619      	mov	r1, r3
 8000884:	8bbb      	ldrh	r3, [r7, #28]
 8000886:	1d38      	adds	r0, r7, #4
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	460b      	mov	r3, r1
 800088c:	4910      	ldr	r1, [pc, #64]	; (80008d0 <main+0xe8>)
 800088e:	f001 fdcf 	bl	8002430 <siprintf>

  lcd_print_string(&lcd, date_char);
 8000892:	1d3a      	adds	r2, r7, #4
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe9c 	bl	80005d8 <lcd_print_string>
  HAL_Delay(2000);
 80008a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a4:	f000 fa4e 	bl	8000d44 <HAL_Delay>

  lcd_set_cursor(&lcd, DISPLAY_ROW_2, DISPLAY_COLUMN_4);
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	2204      	movs	r2, #4
 80008ae:	2102      	movs	r1, #2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5b 	bl	800076c <lcd_set_cursor>
  lcd_print_string(&lcd, "HD44780");
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4906      	ldr	r1, [pc, #24]	; (80008d4 <main+0xec>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe8b 	bl	80005d8 <lcd_print_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <main+0xda>
 80008c4:	20000078 	.word	0x20000078
 80008c8:	08002d90 	.word	0x08002d90
 80008cc:	08002db0 	.word	0x08002db0
 80008d0:	08002d9c 	.word	0x08002d9c
 80008d4:	08002da8 	.word	0x08002da8

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	; 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2230      	movs	r2, #48	; 0x30
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fdc2 	bl	8002470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <SystemClock_Config+0xcc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <SystemClock_Config+0xcc>)
 8000906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <SystemClock_Config+0xcc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <SystemClock_Config+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemClock_Config+0xd0>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000948:	2308      	movs	r3, #8
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800094c:	2332      	movs	r3, #50	; 0x32
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000950:	2304      	movs	r3, #4
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f8e3 	bl	8001b28 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000968:	f000 f868 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000978:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fb44 	bl	8002018 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000996:	f000 f851 	bl	8000a3c <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C1_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <MX_I2C1_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_I2C1_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_I2C1_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_I2C1_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_I2C1_Init+0x50>)
 80009ea:	f000 fc51 	bl	8001290 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f822 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000078 	.word	0x20000078
 8000a00:	40005400 	.word	0x40005400
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_GPIO_Init+0x30>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <MX_GPIO_Init+0x30>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_GPIO_Init+0x30>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 fa32 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af2:	f000 fa31 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f8c6 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f001 fc68 	bl	8002480 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	200000cc 	.word	0x200000cc
 8000be4:	20000220 	.word	0x20000220

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c28:	4c0b      	ldr	r4, [pc, #44]	; (8000c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c36:	f7ff ffd7 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f001 fc27 	bl	800248c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fdd3 	bl	80007e8 <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c50:	08002e14 	.word	0x08002e14
  ldr r2, =_sbss
 8000c54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c58:	2000021c 	.word	0x2000021c

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f931 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fed8 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f93b 	bl	8000f3e <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f911 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200000d0 	.word	0x200000d0

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200000d0 	.word	0x200000d0

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff47 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5c 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb0 	bl	8000eac <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e16b      	b.n	800124c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 815a 	bne.w	8001246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80b4 	beq.w	8001246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b60      	ldr	r3, [pc, #384]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a5b      	ldr	r2, [pc, #364]	; (8001268 <HAL_GPIO_Init+0x310>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_GPIO_Init+0x314>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a51      	ldr	r2, [pc, #324]	; (8001270 <HAL_GPIO_Init+0x318>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a50      	ldr	r2, [pc, #320]	; (8001274 <HAL_GPIO_Init+0x31c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <HAL_GPIO_Init+0x320>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4e      	ldr	r2, [pc, #312]	; (800127c <HAL_GPIO_Init+0x324>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x216>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4d      	ldr	r2, [pc, #308]	; (8001280 <HAL_GPIO_Init+0x328>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x212>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <HAL_GPIO_Init+0x330>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x20a>
 800115e:	2307      	movs	r3, #7
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001162:	2308      	movs	r3, #8
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x310>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_GPIO_Init+0x334>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a32      	ldr	r2, [pc, #200]	; (800128c <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_GPIO_Init+0x334>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_GPIO_Init+0x334>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_GPIO_Init+0x334>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_GPIO_Init+0x334>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_GPIO_Init+0x334>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae90 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40021c00 	.word	0x40021c00
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e12b      	b.n	80014fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fbee 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012f4:	f001 f888 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 80012f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a81      	ldr	r2, [pc, #516]	; (8001504 <HAL_I2C_Init+0x274>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d807      	bhi.n	8001314 <HAL_I2C_Init+0x84>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a80      	ldr	r2, [pc, #512]	; (8001508 <HAL_I2C_Init+0x278>)
 8001308:	4293      	cmp	r3, r2
 800130a:	bf94      	ite	ls
 800130c:	2301      	movls	r3, #1
 800130e:	2300      	movhi	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	e006      	b.n	8001322 <HAL_I2C_Init+0x92>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a7d      	ldr	r2, [pc, #500]	; (800150c <HAL_I2C_Init+0x27c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	bf94      	ite	ls
 800131c:	2301      	movls	r3, #1
 800131e:	2300      	movhi	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0e7      	b.n	80014fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4a78      	ldr	r2, [pc, #480]	; (8001510 <HAL_I2C_Init+0x280>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0c9b      	lsrs	r3, r3, #18
 8001334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	430a      	orrs	r2, r1
 8001348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a6a      	ldr	r2, [pc, #424]	; (8001504 <HAL_I2C_Init+0x274>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d802      	bhi.n	8001364 <HAL_I2C_Init+0xd4>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3301      	adds	r3, #1
 8001362:	e009      	b.n	8001378 <HAL_I2C_Init+0xe8>
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_I2C_Init+0x284>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	099b      	lsrs	r3, r3, #6
 8001376:	3301      	adds	r3, #1
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	430b      	orrs	r3, r1
 800137e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800138a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	495c      	ldr	r1, [pc, #368]	; (8001504 <HAL_I2C_Init+0x274>)
 8001394:	428b      	cmp	r3, r1
 8001396:	d819      	bhi.n	80013cc <HAL_I2C_Init+0x13c>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1e59      	subs	r1, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a6:	1c59      	adds	r1, r3, #1
 80013a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013ac:	400b      	ands	r3, r1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <HAL_I2C_Init+0x138>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1e59      	subs	r1, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c6:	e051      	b.n	800146c <HAL_I2C_Init+0x1dc>
 80013c8:	2304      	movs	r3, #4
 80013ca:	e04f      	b.n	800146c <HAL_I2C_Init+0x1dc>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d111      	bne.n	80013f8 <HAL_I2C_Init+0x168>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	440b      	add	r3, r1
 80013e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e6:	3301      	adds	r3, #1
 80013e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	e012      	b.n	800141e <HAL_I2C_Init+0x18e>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1e58      	subs	r0, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	0099      	lsls	r1, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	fbb0 f3f3 	udiv	r3, r0, r3
 800140e:	3301      	adds	r3, #1
 8001410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_Init+0x196>
 8001422:	2301      	movs	r3, #1
 8001424:	e022      	b.n	800146c <HAL_I2C_Init+0x1dc>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10e      	bne.n	800144c <HAL_I2C_Init+0x1bc>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1e58      	subs	r0, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6859      	ldr	r1, [r3, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	440b      	add	r3, r1
 800143c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001440:	3301      	adds	r3, #1
 8001442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144a:	e00f      	b.n	800146c <HAL_I2C_Init+0x1dc>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1e58      	subs	r0, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	0099      	lsls	r1, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001462:	3301      	adds	r3, #1
 8001464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	6809      	ldr	r1, [r1, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800149a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6911      	ldr	r1, [r2, #16]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68d2      	ldr	r2, [r2, #12]
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2220      	movs	r2, #32
 80014e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	000186a0 	.word	0x000186a0
 8001508:	001e847f 	.word	0x001e847f
 800150c:	003d08ff 	.word	0x003d08ff
 8001510:	431bde83 	.word	0x431bde83
 8001514:	10624dd3 	.word	0x10624dd3

08001518 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	461a      	mov	r2, r3
 8001524:	460b      	mov	r3, r1
 8001526:	817b      	strh	r3, [r7, #10]
 8001528:	4613      	mov	r3, r2
 800152a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff fbfe 	bl	8000d2c <HAL_GetTick>
 8001530:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b20      	cmp	r3, #32
 800153c:	f040 80e0 	bne.w	8001700 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2319      	movs	r3, #25
 8001546:	2201      	movs	r2, #1
 8001548:	4970      	ldr	r1, [pc, #448]	; (800170c <HAL_I2C_Master_Transmit+0x1f4>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f964 	bl	8001818 <I2C_WaitOnFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	e0d3      	b.n	8001702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_I2C_Master_Transmit+0x50>
 8001564:	2302      	movs	r3, #2
 8001566:	e0cc      	b.n	8001702 <HAL_I2C_Master_Transmit+0x1ea>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d007      	beq.n	800158e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2221      	movs	r2, #33	; 0x21
 80015a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2210      	movs	r2, #16
 80015aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	893a      	ldrh	r2, [r7, #8]
 80015be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_I2C_Master_Transmit+0x1f8>)
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015d0:	8979      	ldrh	r1, [r7, #10]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f89c 	bl	8001714 <I2C_MasterRequestWrite>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08d      	b.n	8001702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015fc:	e066      	b.n	80016cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	6a39      	ldr	r1, [r7, #32]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f9de 	bl	80019c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00d      	beq.n	800162a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b04      	cmp	r3, #4
 8001614:	d107      	bne.n	8001626 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06b      	b.n	8001702 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b04      	cmp	r3, #4
 8001666:	d11b      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x188>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	6a39      	ldr	r1, [r7, #32]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f9ce 	bl	8001a46 <I2C_WaitOnBTFFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00d      	beq.n	80016cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d107      	bne.n	80016c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e01a      	b.n	8001702 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d194      	bne.n	80015fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e000      	b.n	8001702 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001700:	2302      	movs	r3, #2
  }
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	00100002 	.word	0x00100002
 8001710:	ffff0000 	.word	0xffff0000

08001714 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	460b      	mov	r3, r1
 8001722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d006      	beq.n	800173e <I2C_MasterRequestWrite+0x2a>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d003      	beq.n	800173e <I2C_MasterRequestWrite+0x2a>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800173c:	d108      	bne.n	8001750 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e00b      	b.n	8001768 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	2b12      	cmp	r3, #18
 8001756:	d107      	bne.n	8001768 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f84f 	bl	8001818 <I2C_WaitOnFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00d      	beq.n	800179c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178e:	d103      	bne.n	8001798 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e035      	b.n	8001808 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017a4:	d108      	bne.n	80017b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	e01b      	b.n	80017f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017b8:	897b      	ldrh	r3, [r7, #10]
 80017ba:	11db      	asrs	r3, r3, #7
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f003 0306 	and.w	r3, r3, #6
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f063 030f 	orn	r3, r3, #15
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <I2C_MasterRequestWrite+0xfc>)
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f875 	bl	80018c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e010      	b.n	8001808 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <I2C_MasterRequestWrite+0x100>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f865 	bl	80018c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	00010008 	.word	0x00010008
 8001814:	00010002 	.word	0x00010002

08001818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001828:	e025      	b.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d021      	beq.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001832:	f7ff fa7b 	bl	8000d2c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d302      	bcc.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d116      	bne.n	8001876 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f043 0220 	orr.w	r2, r3, #32
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e023      	b.n	80018be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10d      	bne.n	800189c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4013      	ands	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf0c      	ite	eq
 8001892:	2301      	moveq	r3, #1
 8001894:	2300      	movne	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	e00c      	b.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4013      	ands	r3, r2
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf0c      	ite	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	2300      	movne	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d0b6      	beq.n	800182a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018d4:	e051      	b.n	800197a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e4:	d123      	bne.n	800192e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f043 0204 	orr.w	r2, r3, #4
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e046      	b.n	80019bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d021      	beq.n	800197a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff f9f9 	bl	8000d2c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d116      	bne.n	800197a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2220      	movs	r2, #32
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f043 0220 	orr.w	r2, r3, #32
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e020      	b.n	80019bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10c      	bne.n	800199e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4013      	ands	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	e00b      	b.n	80019b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	43da      	mvns	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4013      	ands	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d18d      	bne.n	80018d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019d0:	e02d      	b.n	8001a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f878 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e02d      	b.n	8001a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d021      	beq.n	8001a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ea:	f7ff f99f 	bl	8000d2c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d302      	bcc.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d116      	bne.n	8001a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f043 0220 	orr.w	r2, r3, #32
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e007      	b.n	8001a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b80      	cmp	r3, #128	; 0x80
 8001a3a:	d1ca      	bne.n	80019d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a52:	e02d      	b.n	8001ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f837 	bl	8001ac8 <I2C_IsAcknowledgeFailed>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e02d      	b.n	8001ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6a:	d021      	beq.n	8001ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6c:	f7ff f95e 	bl	8000d2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d302      	bcc.n	8001a82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e007      	b.n	8001ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d1ca      	bne.n	8001a54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ade:	d11b      	bne.n	8001b18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ae8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e267      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d075      	beq.n	8001c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d00c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b85      	ldr	r3, [pc, #532]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d112      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5e:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6a:	d10b      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	4b7e      	ldr	r3, [pc, #504]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d05b      	beq.n	8001c30 <HAL_RCC_OscConfig+0x108>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d157      	bne.n	8001c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e242      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_OscConfig+0x74>
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xb0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x98>
 8001ba6:	4b70      	ldr	r3, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6f      	ldr	r2, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6c      	ldr	r2, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xb0>
 8001bc0:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a68      	ldr	r2, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff f8a4 	bl	8000d2c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff f8a0 	bl	8000d2c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e207      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xc0>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff f890 	bl	8000d2c <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff f88c 	bl	8000d2c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1f3      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0xe8>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x152>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1c7      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_OscConfig+0x244>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f845 	bl	8000d2c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f841 	bl	8000d2c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1a8      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4925      	ldr	r1, [pc, #148]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x244>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f824 	bl	8000d2c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f820 	bl	8000d2c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e187      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d036      	beq.n	8001d80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d016      	beq.n	8001d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_RCC_OscConfig+0x248>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f804 	bl	8000d2c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff f800 	bl	8000d2c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e167      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x200>
 8001d46:	e01b      	b.n	8001d80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x248>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe ffed 	bl	8000d2c <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	e00e      	b.n	8001d74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d56:	f7fe ffe9 	bl	8000d2c <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d907      	bls.n	8001d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e150      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470000 	.word	0x42470000
 8001d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ea      	bne.n	8001d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8097 	beq.w	8001ebc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b7d      	ldr	r3, [pc, #500]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a7c      	ldr	r2, [pc, #496]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b7a      	ldr	r3, [pc, #488]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <HAL_RCC_OscConfig+0x474>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b74      	ldr	r3, [pc, #464]	; (8001f9c <HAL_RCC_OscConfig+0x474>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a73      	ldr	r2, [pc, #460]	; (8001f9c <HAL_RCC_OscConfig+0x474>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe ffa9 	bl	8000d2c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7fe ffa5 	bl	8000d2c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e10c      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_OscConfig+0x474>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x2ea>
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a63      	ldr	r2, [pc, #396]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	e01c      	b.n	8001e4c <HAL_RCC_OscConfig+0x324>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x30c>
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a5e      	ldr	r2, [pc, #376]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
 8001e26:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0x324>
 8001e34:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	4b55      	ldr	r3, [pc, #340]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a54      	ldr	r2, [pc, #336]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d015      	beq.n	8001e80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7fe ff6a 	bl	8000d2c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7fe ff66 	bl	8000d2c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0cb      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0ee      	beq.n	8001e5c <HAL_RCC_OscConfig+0x334>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7fe ff54 	bl	8000d2c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe ff50 	bl	8000d2c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0b5      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ee      	bne.n	8001e88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a38      	ldr	r2, [pc, #224]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a1 	beq.w	8002008 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d05c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d141      	bne.n	8001f5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_OscConfig+0x478>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ff24 	bl	8000d2c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe ff20 	bl	8000d2c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e087      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	491b      	ldr	r1, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x478>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fef9 	bl	8000d2c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe fef5 	bl	8000d2c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e05c      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x416>
 8001f5c:	e054      	b.n	8002008 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_OscConfig+0x478>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fee2 	bl	8000d2c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fede 	bl	8000d2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e045      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_OscConfig+0x470>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x444>
 8001f8a:	e03d      	b.n	8002008 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e038      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x4ec>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d028      	beq.n	8002004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d121      	bne.n	8002004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d11a      	bne.n	8002004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d111      	bne.n	8002004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	3b01      	subs	r3, #1
 8001fee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0cc      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d90c      	bls.n	8002054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0b8      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	494d      	ldr	r1, [pc, #308]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d044      	beq.n	8002138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e07f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e067      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4934      	ldr	r1, [pc, #208]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fe10 	bl	8000d2c <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fe0c 	bl	8000d2c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e04f      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d20c      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e032      	b.n	80021c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4916      	ldr	r1, [pc, #88]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800219e:	f000 f821 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	5ccb      	ldrb	r3, [r1, r3]
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fd70 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00
 80021d4:	40023800 	.word	0x40023800
 80021d8:	08002db8 	.word	0x08002db8
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e8:	b094      	sub	sp, #80	; 0x50
 80021ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	647b      	str	r3, [r7, #68]	; 0x44
 80021f0:	2300      	movs	r3, #0
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f4:	2300      	movs	r3, #0
 80021f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021fc:	4b79      	ldr	r3, [pc, #484]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d00d      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x40>
 8002208:	2b08      	cmp	r3, #8
 800220a:	f200 80e1 	bhi.w	80023d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x34>
 8002212:	2b04      	cmp	r3, #4
 8002214:	d003      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x3a>
 8002216:	e0db      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800221c:	e0db      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002222:	e0d8      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002224:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800222c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222e:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	2200      	movs	r2, #0
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
 8002244:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
 8002252:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002256:	4622      	mov	r2, r4
 8002258:	462b      	mov	r3, r5
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	0159      	lsls	r1, r3, #5
 8002264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002268:	0150      	lsls	r0, r2, #5
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4621      	mov	r1, r4
 8002270:	1a51      	subs	r1, r2, r1
 8002272:	6139      	str	r1, [r7, #16]
 8002274:	4629      	mov	r1, r5
 8002276:	eb63 0301 	sbc.w	r3, r3, r1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002288:	4659      	mov	r1, fp
 800228a:	018b      	lsls	r3, r1, #6
 800228c:	4651      	mov	r1, sl
 800228e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002292:	4651      	mov	r1, sl
 8002294:	018a      	lsls	r2, r1, #6
 8002296:	4651      	mov	r1, sl
 8002298:	ebb2 0801 	subs.w	r8, r2, r1
 800229c:	4659      	mov	r1, fp
 800229e:	eb63 0901 	sbc.w	r9, r3, r1
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b6:	4690      	mov	r8, r2
 80022b8:	4699      	mov	r9, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	eb18 0303 	adds.w	r3, r8, r3
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	462b      	mov	r3, r5
 80022c4:	eb49 0303 	adc.w	r3, r9, r3
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022d6:	4629      	mov	r1, r5
 80022d8:	024b      	lsls	r3, r1, #9
 80022da:	4621      	mov	r1, r4
 80022dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e0:	4621      	mov	r1, r4
 80022e2:	024a      	lsls	r2, r1, #9
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ea:	2200      	movs	r2, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022f4:	f7fd ffbc 	bl	8000270 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4613      	mov	r3, r2
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002300:	e058      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	2200      	movs	r2, #0
 800230a:	4618      	mov	r0, r3
 800230c:	4611      	mov	r1, r2
 800230e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800231c:	4642      	mov	r2, r8
 800231e:	464b      	mov	r3, r9
 8002320:	f04f 0000 	mov.w	r0, #0
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	0159      	lsls	r1, r3, #5
 800232a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800232e:	0150      	lsls	r0, r2, #5
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4641      	mov	r1, r8
 8002336:	ebb2 0a01 	subs.w	sl, r2, r1
 800233a:	4649      	mov	r1, r9
 800233c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800234c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002350:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002354:	ebb2 040a 	subs.w	r4, r2, sl
 8002358:	eb63 050b 	sbc.w	r5, r3, fp
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	00eb      	lsls	r3, r5, #3
 8002366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800236a:	00e2      	lsls	r2, r4, #3
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	4643      	mov	r3, r8
 8002372:	18e3      	adds	r3, r4, r3
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	464b      	mov	r3, r9
 8002378:	eb45 0303 	adc.w	r3, r5, r3
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238a:	4629      	mov	r1, r5
 800238c:	028b      	lsls	r3, r1, #10
 800238e:	4621      	mov	r1, r4
 8002390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002394:	4621      	mov	r1, r4
 8002396:	028a      	lsls	r2, r1, #10
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239e:	2200      	movs	r2, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	61fa      	str	r2, [r7, #28]
 80023a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a8:	f7fd ff62 	bl	8000270 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3750      	adds	r7, #80	; 0x50
 80023dc:	46bd      	mov	sp, r7
 80023de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08002dc8 	.word	0x08002dc8

08002430 <siprintf>:
 8002430:	b40e      	push	{r1, r2, r3}
 8002432:	b500      	push	{lr}
 8002434:	b09c      	sub	sp, #112	; 0x70
 8002436:	ab1d      	add	r3, sp, #116	; 0x74
 8002438:	9002      	str	r0, [sp, #8]
 800243a:	9006      	str	r0, [sp, #24]
 800243c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <siprintf+0x38>)
 8002442:	9107      	str	r1, [sp, #28]
 8002444:	9104      	str	r1, [sp, #16]
 8002446:	4909      	ldr	r1, [pc, #36]	; (800246c <siprintf+0x3c>)
 8002448:	f853 2b04 	ldr.w	r2, [r3], #4
 800244c:	9105      	str	r1, [sp, #20]
 800244e:	6800      	ldr	r0, [r0, #0]
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	a902      	add	r1, sp, #8
 8002454:	f000 f992 	bl	800277c <_svfiprintf_r>
 8002458:	9b02      	ldr	r3, [sp, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	b01c      	add	sp, #112	; 0x70
 8002460:	f85d eb04 	ldr.w	lr, [sp], #4
 8002464:	b003      	add	sp, #12
 8002466:	4770      	bx	lr
 8002468:	20000058 	.word	0x20000058
 800246c:	ffff0208 	.word	0xffff0208

08002470 <memset>:
 8002470:	4402      	add	r2, r0
 8002472:	4603      	mov	r3, r0
 8002474:	4293      	cmp	r3, r2
 8002476:	d100      	bne.n	800247a <memset+0xa>
 8002478:	4770      	bx	lr
 800247a:	f803 1b01 	strb.w	r1, [r3], #1
 800247e:	e7f9      	b.n	8002474 <memset+0x4>

08002480 <__errno>:
 8002480:	4b01      	ldr	r3, [pc, #4]	; (8002488 <__errno+0x8>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000058 	.word	0x20000058

0800248c <__libc_init_array>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	4d0d      	ldr	r5, [pc, #52]	; (80024c4 <__libc_init_array+0x38>)
 8002490:	4c0d      	ldr	r4, [pc, #52]	; (80024c8 <__libc_init_array+0x3c>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	2600      	movs	r6, #0
 8002498:	42a6      	cmp	r6, r4
 800249a:	d109      	bne.n	80024b0 <__libc_init_array+0x24>
 800249c:	4d0b      	ldr	r5, [pc, #44]	; (80024cc <__libc_init_array+0x40>)
 800249e:	4c0c      	ldr	r4, [pc, #48]	; (80024d0 <__libc_init_array+0x44>)
 80024a0:	f000 fc6a 	bl	8002d78 <_init>
 80024a4:	1b64      	subs	r4, r4, r5
 80024a6:	10a4      	asrs	r4, r4, #2
 80024a8:	2600      	movs	r6, #0
 80024aa:	42a6      	cmp	r6, r4
 80024ac:	d105      	bne.n	80024ba <__libc_init_array+0x2e>
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b4:	4798      	blx	r3
 80024b6:	3601      	adds	r6, #1
 80024b8:	e7ee      	b.n	8002498 <__libc_init_array+0xc>
 80024ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80024be:	4798      	blx	r3
 80024c0:	3601      	adds	r6, #1
 80024c2:	e7f2      	b.n	80024aa <__libc_init_array+0x1e>
 80024c4:	08002e0c 	.word	0x08002e0c
 80024c8:	08002e0c 	.word	0x08002e0c
 80024cc:	08002e0c 	.word	0x08002e0c
 80024d0:	08002e10 	.word	0x08002e10

080024d4 <__retarget_lock_acquire_recursive>:
 80024d4:	4770      	bx	lr

080024d6 <__retarget_lock_release_recursive>:
 80024d6:	4770      	bx	lr

080024d8 <_free_r>:
 80024d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024da:	2900      	cmp	r1, #0
 80024dc:	d044      	beq.n	8002568 <_free_r+0x90>
 80024de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024e2:	9001      	str	r0, [sp, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f1a1 0404 	sub.w	r4, r1, #4
 80024ea:	bfb8      	it	lt
 80024ec:	18e4      	addlt	r4, r4, r3
 80024ee:	f000 f8df 	bl	80026b0 <__malloc_lock>
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <_free_r+0x94>)
 80024f4:	9801      	ldr	r0, [sp, #4]
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	b933      	cbnz	r3, 8002508 <_free_r+0x30>
 80024fa:	6063      	str	r3, [r4, #4]
 80024fc:	6014      	str	r4, [r2, #0]
 80024fe:	b003      	add	sp, #12
 8002500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002504:	f000 b8da 	b.w	80026bc <__malloc_unlock>
 8002508:	42a3      	cmp	r3, r4
 800250a:	d908      	bls.n	800251e <_free_r+0x46>
 800250c:	6825      	ldr	r5, [r4, #0]
 800250e:	1961      	adds	r1, r4, r5
 8002510:	428b      	cmp	r3, r1
 8002512:	bf01      	itttt	eq
 8002514:	6819      	ldreq	r1, [r3, #0]
 8002516:	685b      	ldreq	r3, [r3, #4]
 8002518:	1949      	addeq	r1, r1, r5
 800251a:	6021      	streq	r1, [r4, #0]
 800251c:	e7ed      	b.n	80024fa <_free_r+0x22>
 800251e:	461a      	mov	r2, r3
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	b10b      	cbz	r3, 8002528 <_free_r+0x50>
 8002524:	42a3      	cmp	r3, r4
 8002526:	d9fa      	bls.n	800251e <_free_r+0x46>
 8002528:	6811      	ldr	r1, [r2, #0]
 800252a:	1855      	adds	r5, r2, r1
 800252c:	42a5      	cmp	r5, r4
 800252e:	d10b      	bne.n	8002548 <_free_r+0x70>
 8002530:	6824      	ldr	r4, [r4, #0]
 8002532:	4421      	add	r1, r4
 8002534:	1854      	adds	r4, r2, r1
 8002536:	42a3      	cmp	r3, r4
 8002538:	6011      	str	r1, [r2, #0]
 800253a:	d1e0      	bne.n	80024fe <_free_r+0x26>
 800253c:	681c      	ldr	r4, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	6053      	str	r3, [r2, #4]
 8002542:	440c      	add	r4, r1
 8002544:	6014      	str	r4, [r2, #0]
 8002546:	e7da      	b.n	80024fe <_free_r+0x26>
 8002548:	d902      	bls.n	8002550 <_free_r+0x78>
 800254a:	230c      	movs	r3, #12
 800254c:	6003      	str	r3, [r0, #0]
 800254e:	e7d6      	b.n	80024fe <_free_r+0x26>
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	1961      	adds	r1, r4, r5
 8002554:	428b      	cmp	r3, r1
 8002556:	bf04      	itt	eq
 8002558:	6819      	ldreq	r1, [r3, #0]
 800255a:	685b      	ldreq	r3, [r3, #4]
 800255c:	6063      	str	r3, [r4, #4]
 800255e:	bf04      	itt	eq
 8002560:	1949      	addeq	r1, r1, r5
 8002562:	6021      	streq	r1, [r4, #0]
 8002564:	6054      	str	r4, [r2, #4]
 8002566:	e7ca      	b.n	80024fe <_free_r+0x26>
 8002568:	b003      	add	sp, #12
 800256a:	bd30      	pop	{r4, r5, pc}
 800256c:	20000214 	.word	0x20000214

08002570 <sbrk_aligned>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	4e0e      	ldr	r6, [pc, #56]	; (80025ac <sbrk_aligned+0x3c>)
 8002574:	460c      	mov	r4, r1
 8002576:	6831      	ldr	r1, [r6, #0]
 8002578:	4605      	mov	r5, r0
 800257a:	b911      	cbnz	r1, 8002582 <sbrk_aligned+0x12>
 800257c:	f000 fba6 	bl	8002ccc <_sbrk_r>
 8002580:	6030      	str	r0, [r6, #0]
 8002582:	4621      	mov	r1, r4
 8002584:	4628      	mov	r0, r5
 8002586:	f000 fba1 	bl	8002ccc <_sbrk_r>
 800258a:	1c43      	adds	r3, r0, #1
 800258c:	d00a      	beq.n	80025a4 <sbrk_aligned+0x34>
 800258e:	1cc4      	adds	r4, r0, #3
 8002590:	f024 0403 	bic.w	r4, r4, #3
 8002594:	42a0      	cmp	r0, r4
 8002596:	d007      	beq.n	80025a8 <sbrk_aligned+0x38>
 8002598:	1a21      	subs	r1, r4, r0
 800259a:	4628      	mov	r0, r5
 800259c:	f000 fb96 	bl	8002ccc <_sbrk_r>
 80025a0:	3001      	adds	r0, #1
 80025a2:	d101      	bne.n	80025a8 <sbrk_aligned+0x38>
 80025a4:	f04f 34ff 	mov.w	r4, #4294967295
 80025a8:	4620      	mov	r0, r4
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	20000218 	.word	0x20000218

080025b0 <_malloc_r>:
 80025b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025b4:	1ccd      	adds	r5, r1, #3
 80025b6:	f025 0503 	bic.w	r5, r5, #3
 80025ba:	3508      	adds	r5, #8
 80025bc:	2d0c      	cmp	r5, #12
 80025be:	bf38      	it	cc
 80025c0:	250c      	movcc	r5, #12
 80025c2:	2d00      	cmp	r5, #0
 80025c4:	4607      	mov	r7, r0
 80025c6:	db01      	blt.n	80025cc <_malloc_r+0x1c>
 80025c8:	42a9      	cmp	r1, r5
 80025ca:	d905      	bls.n	80025d8 <_malloc_r+0x28>
 80025cc:	230c      	movs	r3, #12
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	2600      	movs	r6, #0
 80025d2:	4630      	mov	r0, r6
 80025d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026ac <_malloc_r+0xfc>
 80025dc:	f000 f868 	bl	80026b0 <__malloc_lock>
 80025e0:	f8d8 3000 	ldr.w	r3, [r8]
 80025e4:	461c      	mov	r4, r3
 80025e6:	bb5c      	cbnz	r4, 8002640 <_malloc_r+0x90>
 80025e8:	4629      	mov	r1, r5
 80025ea:	4638      	mov	r0, r7
 80025ec:	f7ff ffc0 	bl	8002570 <sbrk_aligned>
 80025f0:	1c43      	adds	r3, r0, #1
 80025f2:	4604      	mov	r4, r0
 80025f4:	d155      	bne.n	80026a2 <_malloc_r+0xf2>
 80025f6:	f8d8 4000 	ldr.w	r4, [r8]
 80025fa:	4626      	mov	r6, r4
 80025fc:	2e00      	cmp	r6, #0
 80025fe:	d145      	bne.n	800268c <_malloc_r+0xdc>
 8002600:	2c00      	cmp	r4, #0
 8002602:	d048      	beq.n	8002696 <_malloc_r+0xe6>
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	4631      	mov	r1, r6
 8002608:	4638      	mov	r0, r7
 800260a:	eb04 0903 	add.w	r9, r4, r3
 800260e:	f000 fb5d 	bl	8002ccc <_sbrk_r>
 8002612:	4581      	cmp	r9, r0
 8002614:	d13f      	bne.n	8002696 <_malloc_r+0xe6>
 8002616:	6821      	ldr	r1, [r4, #0]
 8002618:	1a6d      	subs	r5, r5, r1
 800261a:	4629      	mov	r1, r5
 800261c:	4638      	mov	r0, r7
 800261e:	f7ff ffa7 	bl	8002570 <sbrk_aligned>
 8002622:	3001      	adds	r0, #1
 8002624:	d037      	beq.n	8002696 <_malloc_r+0xe6>
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	442b      	add	r3, r5
 800262a:	6023      	str	r3, [r4, #0]
 800262c:	f8d8 3000 	ldr.w	r3, [r8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d038      	beq.n	80026a6 <_malloc_r+0xf6>
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	42a2      	cmp	r2, r4
 8002638:	d12b      	bne.n	8002692 <_malloc_r+0xe2>
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e00f      	b.n	8002660 <_malloc_r+0xb0>
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	1b52      	subs	r2, r2, r5
 8002644:	d41f      	bmi.n	8002686 <_malloc_r+0xd6>
 8002646:	2a0b      	cmp	r2, #11
 8002648:	d917      	bls.n	800267a <_malloc_r+0xca>
 800264a:	1961      	adds	r1, r4, r5
 800264c:	42a3      	cmp	r3, r4
 800264e:	6025      	str	r5, [r4, #0]
 8002650:	bf18      	it	ne
 8002652:	6059      	strne	r1, [r3, #4]
 8002654:	6863      	ldr	r3, [r4, #4]
 8002656:	bf08      	it	eq
 8002658:	f8c8 1000 	streq.w	r1, [r8]
 800265c:	5162      	str	r2, [r4, r5]
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	4638      	mov	r0, r7
 8002662:	f104 060b 	add.w	r6, r4, #11
 8002666:	f000 f829 	bl	80026bc <__malloc_unlock>
 800266a:	f026 0607 	bic.w	r6, r6, #7
 800266e:	1d23      	adds	r3, r4, #4
 8002670:	1af2      	subs	r2, r6, r3
 8002672:	d0ae      	beq.n	80025d2 <_malloc_r+0x22>
 8002674:	1b9b      	subs	r3, r3, r6
 8002676:	50a3      	str	r3, [r4, r2]
 8002678:	e7ab      	b.n	80025d2 <_malloc_r+0x22>
 800267a:	42a3      	cmp	r3, r4
 800267c:	6862      	ldr	r2, [r4, #4]
 800267e:	d1dd      	bne.n	800263c <_malloc_r+0x8c>
 8002680:	f8c8 2000 	str.w	r2, [r8]
 8002684:	e7ec      	b.n	8002660 <_malloc_r+0xb0>
 8002686:	4623      	mov	r3, r4
 8002688:	6864      	ldr	r4, [r4, #4]
 800268a:	e7ac      	b.n	80025e6 <_malloc_r+0x36>
 800268c:	4634      	mov	r4, r6
 800268e:	6876      	ldr	r6, [r6, #4]
 8002690:	e7b4      	b.n	80025fc <_malloc_r+0x4c>
 8002692:	4613      	mov	r3, r2
 8002694:	e7cc      	b.n	8002630 <_malloc_r+0x80>
 8002696:	230c      	movs	r3, #12
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4638      	mov	r0, r7
 800269c:	f000 f80e 	bl	80026bc <__malloc_unlock>
 80026a0:	e797      	b.n	80025d2 <_malloc_r+0x22>
 80026a2:	6025      	str	r5, [r4, #0]
 80026a4:	e7dc      	b.n	8002660 <_malloc_r+0xb0>
 80026a6:	605b      	str	r3, [r3, #4]
 80026a8:	deff      	udf	#255	; 0xff
 80026aa:	bf00      	nop
 80026ac:	20000214 	.word	0x20000214

080026b0 <__malloc_lock>:
 80026b0:	4801      	ldr	r0, [pc, #4]	; (80026b8 <__malloc_lock+0x8>)
 80026b2:	f7ff bf0f 	b.w	80024d4 <__retarget_lock_acquire_recursive>
 80026b6:	bf00      	nop
 80026b8:	20000210 	.word	0x20000210

080026bc <__malloc_unlock>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__malloc_unlock+0x8>)
 80026be:	f7ff bf0a 	b.w	80024d6 <__retarget_lock_release_recursive>
 80026c2:	bf00      	nop
 80026c4:	20000210 	.word	0x20000210

080026c8 <__ssputs_r>:
 80026c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026cc:	688e      	ldr	r6, [r1, #8]
 80026ce:	461f      	mov	r7, r3
 80026d0:	42be      	cmp	r6, r7
 80026d2:	680b      	ldr	r3, [r1, #0]
 80026d4:	4682      	mov	sl, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	4690      	mov	r8, r2
 80026da:	d82c      	bhi.n	8002736 <__ssputs_r+0x6e>
 80026dc:	898a      	ldrh	r2, [r1, #12]
 80026de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026e2:	d026      	beq.n	8002732 <__ssputs_r+0x6a>
 80026e4:	6965      	ldr	r5, [r4, #20]
 80026e6:	6909      	ldr	r1, [r1, #16]
 80026e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026ec:	eba3 0901 	sub.w	r9, r3, r1
 80026f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80026f4:	1c7b      	adds	r3, r7, #1
 80026f6:	444b      	add	r3, r9
 80026f8:	106d      	asrs	r5, r5, #1
 80026fa:	429d      	cmp	r5, r3
 80026fc:	bf38      	it	cc
 80026fe:	461d      	movcc	r5, r3
 8002700:	0553      	lsls	r3, r2, #21
 8002702:	d527      	bpl.n	8002754 <__ssputs_r+0x8c>
 8002704:	4629      	mov	r1, r5
 8002706:	f7ff ff53 	bl	80025b0 <_malloc_r>
 800270a:	4606      	mov	r6, r0
 800270c:	b360      	cbz	r0, 8002768 <__ssputs_r+0xa0>
 800270e:	6921      	ldr	r1, [r4, #16]
 8002710:	464a      	mov	r2, r9
 8002712:	f000 faeb 	bl	8002cec <memcpy>
 8002716:	89a3      	ldrh	r3, [r4, #12]
 8002718:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	81a3      	strh	r3, [r4, #12]
 8002722:	6126      	str	r6, [r4, #16]
 8002724:	6165      	str	r5, [r4, #20]
 8002726:	444e      	add	r6, r9
 8002728:	eba5 0509 	sub.w	r5, r5, r9
 800272c:	6026      	str	r6, [r4, #0]
 800272e:	60a5      	str	r5, [r4, #8]
 8002730:	463e      	mov	r6, r7
 8002732:	42be      	cmp	r6, r7
 8002734:	d900      	bls.n	8002738 <__ssputs_r+0x70>
 8002736:	463e      	mov	r6, r7
 8002738:	6820      	ldr	r0, [r4, #0]
 800273a:	4632      	mov	r2, r6
 800273c:	4641      	mov	r1, r8
 800273e:	f000 faab 	bl	8002c98 <memmove>
 8002742:	68a3      	ldr	r3, [r4, #8]
 8002744:	1b9b      	subs	r3, r3, r6
 8002746:	60a3      	str	r3, [r4, #8]
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	4433      	add	r3, r6
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	2000      	movs	r0, #0
 8002750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002754:	462a      	mov	r2, r5
 8002756:	f000 fad7 	bl	8002d08 <_realloc_r>
 800275a:	4606      	mov	r6, r0
 800275c:	2800      	cmp	r0, #0
 800275e:	d1e0      	bne.n	8002722 <__ssputs_r+0x5a>
 8002760:	6921      	ldr	r1, [r4, #16]
 8002762:	4650      	mov	r0, sl
 8002764:	f7ff feb8 	bl	80024d8 <_free_r>
 8002768:	230c      	movs	r3, #12
 800276a:	f8ca 3000 	str.w	r3, [sl]
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002774:	81a3      	strh	r3, [r4, #12]
 8002776:	f04f 30ff 	mov.w	r0, #4294967295
 800277a:	e7e9      	b.n	8002750 <__ssputs_r+0x88>

0800277c <_svfiprintf_r>:
 800277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002780:	4698      	mov	r8, r3
 8002782:	898b      	ldrh	r3, [r1, #12]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	b09d      	sub	sp, #116	; 0x74
 8002788:	4607      	mov	r7, r0
 800278a:	460d      	mov	r5, r1
 800278c:	4614      	mov	r4, r2
 800278e:	d50e      	bpl.n	80027ae <_svfiprintf_r+0x32>
 8002790:	690b      	ldr	r3, [r1, #16]
 8002792:	b963      	cbnz	r3, 80027ae <_svfiprintf_r+0x32>
 8002794:	2140      	movs	r1, #64	; 0x40
 8002796:	f7ff ff0b 	bl	80025b0 <_malloc_r>
 800279a:	6028      	str	r0, [r5, #0]
 800279c:	6128      	str	r0, [r5, #16]
 800279e:	b920      	cbnz	r0, 80027aa <_svfiprintf_r+0x2e>
 80027a0:	230c      	movs	r3, #12
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	e0d0      	b.n	800294c <_svfiprintf_r+0x1d0>
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	616b      	str	r3, [r5, #20]
 80027ae:	2300      	movs	r3, #0
 80027b0:	9309      	str	r3, [sp, #36]	; 0x24
 80027b2:	2320      	movs	r3, #32
 80027b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80027bc:	2330      	movs	r3, #48	; 0x30
 80027be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002964 <_svfiprintf_r+0x1e8>
 80027c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027c6:	f04f 0901 	mov.w	r9, #1
 80027ca:	4623      	mov	r3, r4
 80027cc:	469a      	mov	sl, r3
 80027ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027d2:	b10a      	cbz	r2, 80027d8 <_svfiprintf_r+0x5c>
 80027d4:	2a25      	cmp	r2, #37	; 0x25
 80027d6:	d1f9      	bne.n	80027cc <_svfiprintf_r+0x50>
 80027d8:	ebba 0b04 	subs.w	fp, sl, r4
 80027dc:	d00b      	beq.n	80027f6 <_svfiprintf_r+0x7a>
 80027de:	465b      	mov	r3, fp
 80027e0:	4622      	mov	r2, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	4638      	mov	r0, r7
 80027e6:	f7ff ff6f 	bl	80026c8 <__ssputs_r>
 80027ea:	3001      	adds	r0, #1
 80027ec:	f000 80a9 	beq.w	8002942 <_svfiprintf_r+0x1c6>
 80027f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027f2:	445a      	add	r2, fp
 80027f4:	9209      	str	r2, [sp, #36]	; 0x24
 80027f6:	f89a 3000 	ldrb.w	r3, [sl]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80a1 	beq.w	8002942 <_svfiprintf_r+0x1c6>
 8002800:	2300      	movs	r3, #0
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800280a:	f10a 0a01 	add.w	sl, sl, #1
 800280e:	9304      	str	r3, [sp, #16]
 8002810:	9307      	str	r3, [sp, #28]
 8002812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002816:	931a      	str	r3, [sp, #104]	; 0x68
 8002818:	4654      	mov	r4, sl
 800281a:	2205      	movs	r2, #5
 800281c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002820:	4850      	ldr	r0, [pc, #320]	; (8002964 <_svfiprintf_r+0x1e8>)
 8002822:	f7fd fcd5 	bl	80001d0 <memchr>
 8002826:	9a04      	ldr	r2, [sp, #16]
 8002828:	b9d8      	cbnz	r0, 8002862 <_svfiprintf_r+0xe6>
 800282a:	06d0      	lsls	r0, r2, #27
 800282c:	bf44      	itt	mi
 800282e:	2320      	movmi	r3, #32
 8002830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002834:	0711      	lsls	r1, r2, #28
 8002836:	bf44      	itt	mi
 8002838:	232b      	movmi	r3, #43	; 0x2b
 800283a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800283e:	f89a 3000 	ldrb.w	r3, [sl]
 8002842:	2b2a      	cmp	r3, #42	; 0x2a
 8002844:	d015      	beq.n	8002872 <_svfiprintf_r+0xf6>
 8002846:	9a07      	ldr	r2, [sp, #28]
 8002848:	4654      	mov	r4, sl
 800284a:	2000      	movs	r0, #0
 800284c:	f04f 0c0a 	mov.w	ip, #10
 8002850:	4621      	mov	r1, r4
 8002852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002856:	3b30      	subs	r3, #48	; 0x30
 8002858:	2b09      	cmp	r3, #9
 800285a:	d94d      	bls.n	80028f8 <_svfiprintf_r+0x17c>
 800285c:	b1b0      	cbz	r0, 800288c <_svfiprintf_r+0x110>
 800285e:	9207      	str	r2, [sp, #28]
 8002860:	e014      	b.n	800288c <_svfiprintf_r+0x110>
 8002862:	eba0 0308 	sub.w	r3, r0, r8
 8002866:	fa09 f303 	lsl.w	r3, r9, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	46a2      	mov	sl, r4
 8002870:	e7d2      	b.n	8002818 <_svfiprintf_r+0x9c>
 8002872:	9b03      	ldr	r3, [sp, #12]
 8002874:	1d19      	adds	r1, r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	9103      	str	r1, [sp, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	bfbb      	ittet	lt
 800287e:	425b      	neglt	r3, r3
 8002880:	f042 0202 	orrlt.w	r2, r2, #2
 8002884:	9307      	strge	r3, [sp, #28]
 8002886:	9307      	strlt	r3, [sp, #28]
 8002888:	bfb8      	it	lt
 800288a:	9204      	strlt	r2, [sp, #16]
 800288c:	7823      	ldrb	r3, [r4, #0]
 800288e:	2b2e      	cmp	r3, #46	; 0x2e
 8002890:	d10c      	bne.n	80028ac <_svfiprintf_r+0x130>
 8002892:	7863      	ldrb	r3, [r4, #1]
 8002894:	2b2a      	cmp	r3, #42	; 0x2a
 8002896:	d134      	bne.n	8002902 <_svfiprintf_r+0x186>
 8002898:	9b03      	ldr	r3, [sp, #12]
 800289a:	1d1a      	adds	r2, r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	9203      	str	r2, [sp, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bfb8      	it	lt
 80028a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80028a8:	3402      	adds	r4, #2
 80028aa:	9305      	str	r3, [sp, #20]
 80028ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002974 <_svfiprintf_r+0x1f8>
 80028b0:	7821      	ldrb	r1, [r4, #0]
 80028b2:	2203      	movs	r2, #3
 80028b4:	4650      	mov	r0, sl
 80028b6:	f7fd fc8b 	bl	80001d0 <memchr>
 80028ba:	b138      	cbz	r0, 80028cc <_svfiprintf_r+0x150>
 80028bc:	9b04      	ldr	r3, [sp, #16]
 80028be:	eba0 000a 	sub.w	r0, r0, sl
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	4082      	lsls	r2, r0
 80028c6:	4313      	orrs	r3, r2
 80028c8:	3401      	adds	r4, #1
 80028ca:	9304      	str	r3, [sp, #16]
 80028cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d0:	4825      	ldr	r0, [pc, #148]	; (8002968 <_svfiprintf_r+0x1ec>)
 80028d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028d6:	2206      	movs	r2, #6
 80028d8:	f7fd fc7a 	bl	80001d0 <memchr>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d038      	beq.n	8002952 <_svfiprintf_r+0x1d6>
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <_svfiprintf_r+0x1f0>)
 80028e2:	bb1b      	cbnz	r3, 800292c <_svfiprintf_r+0x1b0>
 80028e4:	9b03      	ldr	r3, [sp, #12]
 80028e6:	3307      	adds	r3, #7
 80028e8:	f023 0307 	bic.w	r3, r3, #7
 80028ec:	3308      	adds	r3, #8
 80028ee:	9303      	str	r3, [sp, #12]
 80028f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f2:	4433      	add	r3, r6
 80028f4:	9309      	str	r3, [sp, #36]	; 0x24
 80028f6:	e768      	b.n	80027ca <_svfiprintf_r+0x4e>
 80028f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80028fc:	460c      	mov	r4, r1
 80028fe:	2001      	movs	r0, #1
 8002900:	e7a6      	b.n	8002850 <_svfiprintf_r+0xd4>
 8002902:	2300      	movs	r3, #0
 8002904:	3401      	adds	r4, #1
 8002906:	9305      	str	r3, [sp, #20]
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0c0a 	mov.w	ip, #10
 800290e:	4620      	mov	r0, r4
 8002910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002914:	3a30      	subs	r2, #48	; 0x30
 8002916:	2a09      	cmp	r2, #9
 8002918:	d903      	bls.n	8002922 <_svfiprintf_r+0x1a6>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0c6      	beq.n	80028ac <_svfiprintf_r+0x130>
 800291e:	9105      	str	r1, [sp, #20]
 8002920:	e7c4      	b.n	80028ac <_svfiprintf_r+0x130>
 8002922:	fb0c 2101 	mla	r1, ip, r1, r2
 8002926:	4604      	mov	r4, r0
 8002928:	2301      	movs	r3, #1
 800292a:	e7f0      	b.n	800290e <_svfiprintf_r+0x192>
 800292c:	ab03      	add	r3, sp, #12
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	462a      	mov	r2, r5
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <_svfiprintf_r+0x1f4>)
 8002934:	a904      	add	r1, sp, #16
 8002936:	4638      	mov	r0, r7
 8002938:	f3af 8000 	nop.w
 800293c:	1c42      	adds	r2, r0, #1
 800293e:	4606      	mov	r6, r0
 8002940:	d1d6      	bne.n	80028f0 <_svfiprintf_r+0x174>
 8002942:	89ab      	ldrh	r3, [r5, #12]
 8002944:	065b      	lsls	r3, r3, #25
 8002946:	f53f af2d 	bmi.w	80027a4 <_svfiprintf_r+0x28>
 800294a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800294c:	b01d      	add	sp, #116	; 0x74
 800294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002952:	ab03      	add	r3, sp, #12
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	462a      	mov	r2, r5
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <_svfiprintf_r+0x1f4>)
 800295a:	a904      	add	r1, sp, #16
 800295c:	4638      	mov	r0, r7
 800295e:	f000 f879 	bl	8002a54 <_printf_i>
 8002962:	e7eb      	b.n	800293c <_svfiprintf_r+0x1c0>
 8002964:	08002dd0 	.word	0x08002dd0
 8002968:	08002dda 	.word	0x08002dda
 800296c:	00000000 	.word	0x00000000
 8002970:	080026c9 	.word	0x080026c9
 8002974:	08002dd6 	.word	0x08002dd6

08002978 <_printf_common>:
 8002978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800297c:	4616      	mov	r6, r2
 800297e:	4699      	mov	r9, r3
 8002980:	688a      	ldr	r2, [r1, #8]
 8002982:	690b      	ldr	r3, [r1, #16]
 8002984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002988:	4293      	cmp	r3, r2
 800298a:	bfb8      	it	lt
 800298c:	4613      	movlt	r3, r2
 800298e:	6033      	str	r3, [r6, #0]
 8002990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002994:	4607      	mov	r7, r0
 8002996:	460c      	mov	r4, r1
 8002998:	b10a      	cbz	r2, 800299e <_printf_common+0x26>
 800299a:	3301      	adds	r3, #1
 800299c:	6033      	str	r3, [r6, #0]
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	0699      	lsls	r1, r3, #26
 80029a2:	bf42      	ittt	mi
 80029a4:	6833      	ldrmi	r3, [r6, #0]
 80029a6:	3302      	addmi	r3, #2
 80029a8:	6033      	strmi	r3, [r6, #0]
 80029aa:	6825      	ldr	r5, [r4, #0]
 80029ac:	f015 0506 	ands.w	r5, r5, #6
 80029b0:	d106      	bne.n	80029c0 <_printf_common+0x48>
 80029b2:	f104 0a19 	add.w	sl, r4, #25
 80029b6:	68e3      	ldr	r3, [r4, #12]
 80029b8:	6832      	ldr	r2, [r6, #0]
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	42ab      	cmp	r3, r5
 80029be:	dc26      	bgt.n	8002a0e <_printf_common+0x96>
 80029c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029c4:	1e13      	subs	r3, r2, #0
 80029c6:	6822      	ldr	r2, [r4, #0]
 80029c8:	bf18      	it	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	0692      	lsls	r2, r2, #26
 80029ce:	d42b      	bmi.n	8002a28 <_printf_common+0xb0>
 80029d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029d4:	4649      	mov	r1, r9
 80029d6:	4638      	mov	r0, r7
 80029d8:	47c0      	blx	r8
 80029da:	3001      	adds	r0, #1
 80029dc:	d01e      	beq.n	8002a1c <_printf_common+0xa4>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	6922      	ldr	r2, [r4, #16]
 80029e2:	f003 0306 	and.w	r3, r3, #6
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf02      	ittt	eq
 80029ea:	68e5      	ldreq	r5, [r4, #12]
 80029ec:	6833      	ldreq	r3, [r6, #0]
 80029ee:	1aed      	subeq	r5, r5, r3
 80029f0:	68a3      	ldr	r3, [r4, #8]
 80029f2:	bf0c      	ite	eq
 80029f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029f8:	2500      	movne	r5, #0
 80029fa:	4293      	cmp	r3, r2
 80029fc:	bfc4      	itt	gt
 80029fe:	1a9b      	subgt	r3, r3, r2
 8002a00:	18ed      	addgt	r5, r5, r3
 8002a02:	2600      	movs	r6, #0
 8002a04:	341a      	adds	r4, #26
 8002a06:	42b5      	cmp	r5, r6
 8002a08:	d11a      	bne.n	8002a40 <_printf_common+0xc8>
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	e008      	b.n	8002a20 <_printf_common+0xa8>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	4652      	mov	r2, sl
 8002a12:	4649      	mov	r1, r9
 8002a14:	4638      	mov	r0, r7
 8002a16:	47c0      	blx	r8
 8002a18:	3001      	adds	r0, #1
 8002a1a:	d103      	bne.n	8002a24 <_printf_common+0xac>
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a24:	3501      	adds	r5, #1
 8002a26:	e7c6      	b.n	80029b6 <_printf_common+0x3e>
 8002a28:	18e1      	adds	r1, r4, r3
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	2030      	movs	r0, #48	; 0x30
 8002a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a32:	4422      	add	r2, r4
 8002a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	e7c7      	b.n	80029d0 <_printf_common+0x58>
 8002a40:	2301      	movs	r3, #1
 8002a42:	4622      	mov	r2, r4
 8002a44:	4649      	mov	r1, r9
 8002a46:	4638      	mov	r0, r7
 8002a48:	47c0      	blx	r8
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	d0e6      	beq.n	8002a1c <_printf_common+0xa4>
 8002a4e:	3601      	adds	r6, #1
 8002a50:	e7d9      	b.n	8002a06 <_printf_common+0x8e>
	...

08002a54 <_printf_i>:
 8002a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a58:	7e0f      	ldrb	r7, [r1, #24]
 8002a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a5c:	2f78      	cmp	r7, #120	; 0x78
 8002a5e:	4691      	mov	r9, r2
 8002a60:	4680      	mov	r8, r0
 8002a62:	460c      	mov	r4, r1
 8002a64:	469a      	mov	sl, r3
 8002a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a6a:	d807      	bhi.n	8002a7c <_printf_i+0x28>
 8002a6c:	2f62      	cmp	r7, #98	; 0x62
 8002a6e:	d80a      	bhi.n	8002a86 <_printf_i+0x32>
 8002a70:	2f00      	cmp	r7, #0
 8002a72:	f000 80d4 	beq.w	8002c1e <_printf_i+0x1ca>
 8002a76:	2f58      	cmp	r7, #88	; 0x58
 8002a78:	f000 80c0 	beq.w	8002bfc <_printf_i+0x1a8>
 8002a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a84:	e03a      	b.n	8002afc <_printf_i+0xa8>
 8002a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a8a:	2b15      	cmp	r3, #21
 8002a8c:	d8f6      	bhi.n	8002a7c <_printf_i+0x28>
 8002a8e:	a101      	add	r1, pc, #4	; (adr r1, 8002a94 <_printf_i+0x40>)
 8002a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a94:	08002aed 	.word	0x08002aed
 8002a98:	08002b01 	.word	0x08002b01
 8002a9c:	08002a7d 	.word	0x08002a7d
 8002aa0:	08002a7d 	.word	0x08002a7d
 8002aa4:	08002a7d 	.word	0x08002a7d
 8002aa8:	08002a7d 	.word	0x08002a7d
 8002aac:	08002b01 	.word	0x08002b01
 8002ab0:	08002a7d 	.word	0x08002a7d
 8002ab4:	08002a7d 	.word	0x08002a7d
 8002ab8:	08002a7d 	.word	0x08002a7d
 8002abc:	08002a7d 	.word	0x08002a7d
 8002ac0:	08002c05 	.word	0x08002c05
 8002ac4:	08002b2d 	.word	0x08002b2d
 8002ac8:	08002bbf 	.word	0x08002bbf
 8002acc:	08002a7d 	.word	0x08002a7d
 8002ad0:	08002a7d 	.word	0x08002a7d
 8002ad4:	08002c27 	.word	0x08002c27
 8002ad8:	08002a7d 	.word	0x08002a7d
 8002adc:	08002b2d 	.word	0x08002b2d
 8002ae0:	08002a7d 	.word	0x08002a7d
 8002ae4:	08002a7d 	.word	0x08002a7d
 8002ae8:	08002bc7 	.word	0x08002bc7
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	602a      	str	r2, [r5, #0]
 8002af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002afc:	2301      	movs	r3, #1
 8002afe:	e09f      	b.n	8002c40 <_printf_i+0x1ec>
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	0607      	lsls	r7, r0, #24
 8002b06:	f103 0104 	add.w	r1, r3, #4
 8002b0a:	6029      	str	r1, [r5, #0]
 8002b0c:	d501      	bpl.n	8002b12 <_printf_i+0xbe>
 8002b0e:	681e      	ldr	r6, [r3, #0]
 8002b10:	e003      	b.n	8002b1a <_printf_i+0xc6>
 8002b12:	0646      	lsls	r6, r0, #25
 8002b14:	d5fb      	bpl.n	8002b0e <_printf_i+0xba>
 8002b16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b1a:	2e00      	cmp	r6, #0
 8002b1c:	da03      	bge.n	8002b26 <_printf_i+0xd2>
 8002b1e:	232d      	movs	r3, #45	; 0x2d
 8002b20:	4276      	negs	r6, r6
 8002b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b26:	485a      	ldr	r0, [pc, #360]	; (8002c90 <_printf_i+0x23c>)
 8002b28:	230a      	movs	r3, #10
 8002b2a:	e012      	b.n	8002b52 <_printf_i+0xfe>
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	6820      	ldr	r0, [r4, #0]
 8002b30:	1d19      	adds	r1, r3, #4
 8002b32:	6029      	str	r1, [r5, #0]
 8002b34:	0605      	lsls	r5, r0, #24
 8002b36:	d501      	bpl.n	8002b3c <_printf_i+0xe8>
 8002b38:	681e      	ldr	r6, [r3, #0]
 8002b3a:	e002      	b.n	8002b42 <_printf_i+0xee>
 8002b3c:	0641      	lsls	r1, r0, #25
 8002b3e:	d5fb      	bpl.n	8002b38 <_printf_i+0xe4>
 8002b40:	881e      	ldrh	r6, [r3, #0]
 8002b42:	4853      	ldr	r0, [pc, #332]	; (8002c90 <_printf_i+0x23c>)
 8002b44:	2f6f      	cmp	r7, #111	; 0x6f
 8002b46:	bf0c      	ite	eq
 8002b48:	2308      	moveq	r3, #8
 8002b4a:	230a      	movne	r3, #10
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b52:	6865      	ldr	r5, [r4, #4]
 8002b54:	60a5      	str	r5, [r4, #8]
 8002b56:	2d00      	cmp	r5, #0
 8002b58:	bfa2      	ittt	ge
 8002b5a:	6821      	ldrge	r1, [r4, #0]
 8002b5c:	f021 0104 	bicge.w	r1, r1, #4
 8002b60:	6021      	strge	r1, [r4, #0]
 8002b62:	b90e      	cbnz	r6, 8002b68 <_printf_i+0x114>
 8002b64:	2d00      	cmp	r5, #0
 8002b66:	d04b      	beq.n	8002c00 <_printf_i+0x1ac>
 8002b68:	4615      	mov	r5, r2
 8002b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8002b72:	5dc7      	ldrb	r7, [r0, r7]
 8002b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b78:	4637      	mov	r7, r6
 8002b7a:	42bb      	cmp	r3, r7
 8002b7c:	460e      	mov	r6, r1
 8002b7e:	d9f4      	bls.n	8002b6a <_printf_i+0x116>
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d10b      	bne.n	8002b9c <_printf_i+0x148>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	07de      	lsls	r6, r3, #31
 8002b88:	d508      	bpl.n	8002b9c <_printf_i+0x148>
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	6861      	ldr	r1, [r4, #4]
 8002b8e:	4299      	cmp	r1, r3
 8002b90:	bfde      	ittt	le
 8002b92:	2330      	movle	r3, #48	; 0x30
 8002b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b9c:	1b52      	subs	r2, r2, r5
 8002b9e:	6122      	str	r2, [r4, #16]
 8002ba0:	f8cd a000 	str.w	sl, [sp]
 8002ba4:	464b      	mov	r3, r9
 8002ba6:	aa03      	add	r2, sp, #12
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4640      	mov	r0, r8
 8002bac:	f7ff fee4 	bl	8002978 <_printf_common>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d14a      	bne.n	8002c4a <_printf_i+0x1f6>
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	b004      	add	sp, #16
 8002bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	4833      	ldr	r0, [pc, #204]	; (8002c94 <_printf_i+0x240>)
 8002bc8:	2778      	movs	r7, #120	; 0x78
 8002bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	6829      	ldr	r1, [r5, #0]
 8002bd2:	061f      	lsls	r7, r3, #24
 8002bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bd8:	d402      	bmi.n	8002be0 <_printf_i+0x18c>
 8002bda:	065f      	lsls	r7, r3, #25
 8002bdc:	bf48      	it	mi
 8002bde:	b2b6      	uxthmi	r6, r6
 8002be0:	07df      	lsls	r7, r3, #31
 8002be2:	bf48      	it	mi
 8002be4:	f043 0320 	orrmi.w	r3, r3, #32
 8002be8:	6029      	str	r1, [r5, #0]
 8002bea:	bf48      	it	mi
 8002bec:	6023      	strmi	r3, [r4, #0]
 8002bee:	b91e      	cbnz	r6, 8002bf8 <_printf_i+0x1a4>
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f023 0320 	bic.w	r3, r3, #32
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	e7a7      	b.n	8002b4c <_printf_i+0xf8>
 8002bfc:	4824      	ldr	r0, [pc, #144]	; (8002c90 <_printf_i+0x23c>)
 8002bfe:	e7e4      	b.n	8002bca <_printf_i+0x176>
 8002c00:	4615      	mov	r5, r2
 8002c02:	e7bd      	b.n	8002b80 <_printf_i+0x12c>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	6826      	ldr	r6, [r4, #0]
 8002c08:	6961      	ldr	r1, [r4, #20]
 8002c0a:	1d18      	adds	r0, r3, #4
 8002c0c:	6028      	str	r0, [r5, #0]
 8002c0e:	0635      	lsls	r5, r6, #24
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	d501      	bpl.n	8002c18 <_printf_i+0x1c4>
 8002c14:	6019      	str	r1, [r3, #0]
 8002c16:	e002      	b.n	8002c1e <_printf_i+0x1ca>
 8002c18:	0670      	lsls	r0, r6, #25
 8002c1a:	d5fb      	bpl.n	8002c14 <_printf_i+0x1c0>
 8002c1c:	8019      	strh	r1, [r3, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	6123      	str	r3, [r4, #16]
 8002c22:	4615      	mov	r5, r2
 8002c24:	e7bc      	b.n	8002ba0 <_printf_i+0x14c>
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	1d1a      	adds	r2, r3, #4
 8002c2a:	602a      	str	r2, [r5, #0]
 8002c2c:	681d      	ldr	r5, [r3, #0]
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4628      	mov	r0, r5
 8002c34:	f7fd facc 	bl	80001d0 <memchr>
 8002c38:	b108      	cbz	r0, 8002c3e <_printf_i+0x1ea>
 8002c3a:	1b40      	subs	r0, r0, r5
 8002c3c:	6060      	str	r0, [r4, #4]
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	6123      	str	r3, [r4, #16]
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c48:	e7aa      	b.n	8002ba0 <_printf_i+0x14c>
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	462a      	mov	r2, r5
 8002c4e:	4649      	mov	r1, r9
 8002c50:	4640      	mov	r0, r8
 8002c52:	47d0      	blx	sl
 8002c54:	3001      	adds	r0, #1
 8002c56:	d0ad      	beq.n	8002bb4 <_printf_i+0x160>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	079b      	lsls	r3, r3, #30
 8002c5c:	d413      	bmi.n	8002c86 <_printf_i+0x232>
 8002c5e:	68e0      	ldr	r0, [r4, #12]
 8002c60:	9b03      	ldr	r3, [sp, #12]
 8002c62:	4298      	cmp	r0, r3
 8002c64:	bfb8      	it	lt
 8002c66:	4618      	movlt	r0, r3
 8002c68:	e7a6      	b.n	8002bb8 <_printf_i+0x164>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	4632      	mov	r2, r6
 8002c6e:	4649      	mov	r1, r9
 8002c70:	4640      	mov	r0, r8
 8002c72:	47d0      	blx	sl
 8002c74:	3001      	adds	r0, #1
 8002c76:	d09d      	beq.n	8002bb4 <_printf_i+0x160>
 8002c78:	3501      	adds	r5, #1
 8002c7a:	68e3      	ldr	r3, [r4, #12]
 8002c7c:	9903      	ldr	r1, [sp, #12]
 8002c7e:	1a5b      	subs	r3, r3, r1
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	dcf2      	bgt.n	8002c6a <_printf_i+0x216>
 8002c84:	e7eb      	b.n	8002c5e <_printf_i+0x20a>
 8002c86:	2500      	movs	r5, #0
 8002c88:	f104 0619 	add.w	r6, r4, #25
 8002c8c:	e7f5      	b.n	8002c7a <_printf_i+0x226>
 8002c8e:	bf00      	nop
 8002c90:	08002de1 	.word	0x08002de1
 8002c94:	08002df2 	.word	0x08002df2

08002c98 <memmove>:
 8002c98:	4288      	cmp	r0, r1
 8002c9a:	b510      	push	{r4, lr}
 8002c9c:	eb01 0402 	add.w	r4, r1, r2
 8002ca0:	d902      	bls.n	8002ca8 <memmove+0x10>
 8002ca2:	4284      	cmp	r4, r0
 8002ca4:	4623      	mov	r3, r4
 8002ca6:	d807      	bhi.n	8002cb8 <memmove+0x20>
 8002ca8:	1e43      	subs	r3, r0, #1
 8002caa:	42a1      	cmp	r1, r4
 8002cac:	d008      	beq.n	8002cc0 <memmove+0x28>
 8002cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cb6:	e7f8      	b.n	8002caa <memmove+0x12>
 8002cb8:	4402      	add	r2, r0
 8002cba:	4601      	mov	r1, r0
 8002cbc:	428a      	cmp	r2, r1
 8002cbe:	d100      	bne.n	8002cc2 <memmove+0x2a>
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002cca:	e7f7      	b.n	8002cbc <memmove+0x24>

08002ccc <_sbrk_r>:
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	4d06      	ldr	r5, [pc, #24]	; (8002ce8 <_sbrk_r+0x1c>)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	602b      	str	r3, [r5, #0]
 8002cd8:	f7fd ff50 	bl	8000b7c <_sbrk>
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	d102      	bne.n	8002ce6 <_sbrk_r+0x1a>
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	b103      	cbz	r3, 8002ce6 <_sbrk_r+0x1a>
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	2000020c 	.word	0x2000020c

08002cec <memcpy>:
 8002cec:	440a      	add	r2, r1
 8002cee:	4291      	cmp	r1, r2
 8002cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cf4:	d100      	bne.n	8002cf8 <memcpy+0xc>
 8002cf6:	4770      	bx	lr
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d02:	4291      	cmp	r1, r2
 8002d04:	d1f9      	bne.n	8002cfa <memcpy+0xe>
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <_realloc_r>:
 8002d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0c:	4680      	mov	r8, r0
 8002d0e:	4614      	mov	r4, r2
 8002d10:	460e      	mov	r6, r1
 8002d12:	b921      	cbnz	r1, 8002d1e <_realloc_r+0x16>
 8002d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d18:	4611      	mov	r1, r2
 8002d1a:	f7ff bc49 	b.w	80025b0 <_malloc_r>
 8002d1e:	b92a      	cbnz	r2, 8002d2c <_realloc_r+0x24>
 8002d20:	f7ff fbda 	bl	80024d8 <_free_r>
 8002d24:	4625      	mov	r5, r4
 8002d26:	4628      	mov	r0, r5
 8002d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d2c:	f000 f81b 	bl	8002d66 <_malloc_usable_size_r>
 8002d30:	4284      	cmp	r4, r0
 8002d32:	4607      	mov	r7, r0
 8002d34:	d802      	bhi.n	8002d3c <_realloc_r+0x34>
 8002d36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d3a:	d812      	bhi.n	8002d62 <_realloc_r+0x5a>
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4640      	mov	r0, r8
 8002d40:	f7ff fc36 	bl	80025b0 <_malloc_r>
 8002d44:	4605      	mov	r5, r0
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d0ed      	beq.n	8002d26 <_realloc_r+0x1e>
 8002d4a:	42bc      	cmp	r4, r7
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4631      	mov	r1, r6
 8002d50:	bf28      	it	cs
 8002d52:	463a      	movcs	r2, r7
 8002d54:	f7ff ffca 	bl	8002cec <memcpy>
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	f7ff fbbc 	bl	80024d8 <_free_r>
 8002d60:	e7e1      	b.n	8002d26 <_realloc_r+0x1e>
 8002d62:	4635      	mov	r5, r6
 8002d64:	e7df      	b.n	8002d26 <_realloc_r+0x1e>

08002d66 <_malloc_usable_size_r>:
 8002d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6a:	1f18      	subs	r0, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bfbc      	itt	lt
 8002d70:	580b      	ldrlt	r3, [r1, r0]
 8002d72:	18c0      	addlt	r0, r0, r3
 8002d74:	4770      	bx	lr
	...

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
